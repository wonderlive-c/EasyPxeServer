// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PxeStorageLite;

#nullable disable

namespace PxeStorageLite.Migrations
{
    [DbContext(typeof(PxeDbContext))]
    [Migration("20251016064635_addsetting")]
    partial class addsetting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("PxeServices.Entities.Settings.ObjectSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8192)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("ObjectSettings", (string)null);
                });

            modelBuilder.Entity("PxeServices.Entities.VncClient.VncConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConnectionId")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConnectionName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DesktopName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WebSocketUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("ConnectionName");

                    b.ToTable("VncConnections", (string)null);
                });

            modelBuilder.Entity("PxeStorageLite.DhcpUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultGateway")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpFilename")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpMode")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpNextServer")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpOptions")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpPassword")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpPath")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpRebootFilename")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpRebootOptions")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpRebootServer")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpRebootTime")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpRootPath")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpServer")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpUsername")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DhcpTftpVendorClass")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DnsServer")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("DomainName")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSuperUser")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("NtpServer")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubnetMask")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("MacAddress");

                    b.ToTable("DhcpUsers", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
