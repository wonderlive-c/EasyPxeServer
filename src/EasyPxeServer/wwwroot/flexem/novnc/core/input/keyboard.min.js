/**
 * Minified by jsDelivr using Terser v5.39.0.
 * Original file: /npm/@flexem/novnc@1.1.6/core/input/keyboard.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import*as Log from"../util/logging.js";import{stopEvent}from"../util/events.js";import*as KeyboardUtil from"./util.js";import KeyTable from"./keysym.js";import*as browser from"../util/browser.js";export default class Keyboard{constructor(e){this._target=e||null,this._keyDownList={},this._pendingKey=null,this._altGrArmed=!1,this._eventHandlers={keyup:this._handleKeyUp.bind(this),keydown:this._handleKeyDown.bind(this),keypress:this._handleKeyPress.bind(this),blur:this._allKeysUp.bind(this),checkalt:this._checkAlt.bind(this)},this.onkeyevent=()=>{}}_sendKeyEvent(e,t,s){if(s)this._keyDownList[t]=e;else{if(!(t in this._keyDownList))return;delete this._keyDownList[t]}Log.Debug("onkeyevent "+(s?"down":"up")+", keysym: "+e,", code: "+t),this.onkeyevent(e,t,s)}_getKeyCode(e){const t=KeyboardUtil.getKeycode(e);if("Unidentified"!==t)return t;if(e.keyCode&&"keypress"!==e.type&&229!==e.keyCode)return"Platform"+e.keyCode;if(e.keyIdentifier){if("U+"!==e.keyIdentifier.substr(0,2))return e.keyIdentifier;const t=parseInt(e.keyIdentifier.substr(2),16);return"Platform"+String.fromCharCode(t).toUpperCase().charCodeAt()}return"Unidentified"}_handleKeyDown(e){const t=this._getKeyCode(e);let s=KeyboardUtil.getKeysym(e);if(this._altGrArmed&&(this._altGrArmed=!1,clearTimeout(this._altGrTimeout),"AltRight"===t&&e.timeStamp-this._altGrCtrlTime<50?s=KeyTable.XK_ISO_Level3_Shift:this._sendKeyEvent(KeyTable.XK_Control_L,"ControlLeft",!0)),"Unidentified"===t)return s&&(this._sendKeyEvent(s,t,!0),this._sendKeyEvent(s,t,!1)),void stopEvent(e);if(browser.isMac()||browser.isIOS())switch(s){case KeyTable.XK_Super_L:s=KeyTable.XK_Alt_L;break;case KeyTable.XK_Super_R:s=KeyTable.XK_Super_L;break;case KeyTable.XK_Alt_L:s=KeyTable.XK_Mode_switch;break;case KeyTable.XK_Alt_R:s=KeyTable.XK_ISO_Level3_Shift}return t in this._keyDownList&&(s=this._keyDownList[t]),(browser.isMac()||browser.isIOS())&&"CapsLock"===t?(this._sendKeyEvent(KeyTable.XK_Caps_Lock,"CapsLock",!0),this._sendKeyEvent(KeyTable.XK_Caps_Lock,"CapsLock",!1),void stopEvent(e)):s||e.key&&!browser.isIE()&&!browser.isEdge()?(this._pendingKey=null,stopEvent(e),"ControlLeft"===t&&browser.isWindows()&&!("ControlLeft"in this._keyDownList)?(this._altGrArmed=!0,this._altGrTimeout=setTimeout(this._handleAltGrTimeout.bind(this),100),void(this._altGrCtrlTime=e.timeStamp)):void this._sendKeyEvent(s,t,!0)):(this._pendingKey=t,void setTimeout(this._handleKeyPressTimeout.bind(this),10,e))}_handleKeyPress(e){if(stopEvent(e),null===this._pendingKey)return;let t=this._getKeyCode(e);const s=KeyboardUtil.getKeysym(e);"Unidentified"!==t&&t!=this._pendingKey||(t=this._pendingKey,this._pendingKey=null,s?this._sendKeyEvent(s,t,!0):Log.Info("keypress with no keysym:",e))}_handleKeyPressTimeout(e){if(null===this._pendingKey)return;let t;const s=this._pendingKey;if(this._pendingKey=null,e.keyCode>=48&&e.keyCode<=57)t=e.keyCode;else if(e.keyCode>=65&&e.keyCode<=90){let s=String.fromCharCode(e.keyCode);s=e.shiftKey?s.toUpperCase():s.toLowerCase(),t=s.charCodeAt()}else t=0;this._sendKeyEvent(t,s,!0)}_handleKeyUp(e){stopEvent(e);const t=this._getKeyCode(e);if(this._altGrArmed&&(this._altGrArmed=!1,clearTimeout(this._altGrTimeout),this._sendKeyEvent(KeyTable.XK_Control_L,"ControlLeft",!0)),(browser.isMac()||browser.isIOS())&&"CapsLock"===t)return this._sendKeyEvent(KeyTable.XK_Caps_Lock,"CapsLock",!0),void this._sendKeyEvent(KeyTable.XK_Caps_Lock,"CapsLock",!1);this._sendKeyEvent(this._keyDownList[t],t,!1),!browser.isWindows()||"ShiftLeft"!==t&&"ShiftRight"!==t||("ShiftRight"in this._keyDownList&&this._sendKeyEvent(this._keyDownList.ShiftRight,"ShiftRight",!1),"ShiftLeft"in this._keyDownList&&this._sendKeyEvent(this._keyDownList.ShiftLeft,"ShiftLeft",!1))}_handleAltGrTimeout(){this._altGrArmed=!1,clearTimeout(this._altGrTimeout),this._sendKeyEvent(KeyTable.XK_Control_L,"ControlLeft",!0)}_allKeysUp(){Log.Debug(">> Keyboard.allKeysUp");for(let e in this._keyDownList)this._sendKeyEvent(this._keyDownList[e],e,!1);Log.Debug("<< Keyboard.allKeysUp")}_checkAlt(e){if(e.skipCheckAlt)return;if(e.altKey)return;const t=this._target,s=this._keyDownList;["AltLeft","AltRight"].forEach((e=>{if(!(e in s))return;const i=new KeyboardEvent("keyup",{key:s[e],code:e});i.skipCheckAlt=!0,t.dispatchEvent(i)}))}grab(){if(this._target.addEventListener("keydown",this._eventHandlers.keydown),this._target.addEventListener("keyup",this._eventHandlers.keyup),this._target.addEventListener("keypress",this._eventHandlers.keypress),window.addEventListener("blur",this._eventHandlers.blur),browser.isWindows()&&browser.isFirefox()){const e=this._eventHandlers.checkalt;["mousedown","mouseup","mousemove","wheel","touchstart","touchend","touchmove","keydown","keyup"].forEach((t=>document.addEventListener(t,e,{capture:!0,passive:!0})))}}ungrab(){if(browser.isWindows()&&browser.isFirefox()){const e=this._eventHandlers.checkalt;["mousedown","mouseup","mousemove","wheel","touchstart","touchend","touchmove","keydown","keyup"].forEach((t=>document.removeEventListener(t,e)))}this._target.removeEventListener("keydown",this._eventHandlers.keydown),this._target.removeEventListener("keyup",this._eventHandlers.keyup),this._target.removeEventListener("keypress",this._eventHandlers.keypress),window.removeEventListener("blur",this._eventHandlers.blur),this._allKeysUp()}}
//# sourceMappingURL=/sm/bac8665435e81cb5bc1448792f847a11a979bccfcd46627f0d67541b30804035.map