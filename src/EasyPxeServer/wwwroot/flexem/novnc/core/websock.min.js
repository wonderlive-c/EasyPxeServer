/**
 * Minified by jsDelivr using Terser v5.39.0.
 * Original file: /npm/@flexem/novnc@1.1.6/core/websock.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import*as Log from"./util/logging.js";const ENABLE_COPYWITHIN=!1,MAX_RQ_GROW_SIZE=41943040;export default class Websock{constructor(){this._websocket=null,this._rQi=0,this._rQlen=0,this._rQbufferSize=4194304,this._rQ=null,this._sQbufferSize=10240,this._sQlen=0,this._sQ=null,this._eventHandlers={message:()=>{},open:()=>{},close:()=>{},error:()=>{}}}get sQ(){return this._sQ}get rQ(){return this._rQ}get rQi(){return this._rQi}set rQi(e){this._rQi=e}get rQlen(){return this._rQlen-this._rQi}rQpeek8(){return this._rQ[this._rQi]}rQskipBytes(e){this._rQi+=e}rQshift8(){return this._rQshift(1)}rQshift16(){return this._rQshift(2)}rQshift32(){return this._rQshift(4)}_rQshift(e){let t=0;for(let s=e-1;s>=0;s--)t+=this._rQ[this._rQi++]<<8*s;return t}rQshiftStr(e){void 0===e&&(e=this.rQlen);let t="";for(let s=0;s<e;s+=4096){let r=this.rQshiftBytes(Math.min(4096,e-s));t+=String.fromCharCode.apply(null,r)}return t}rQshiftBytes(e){return void 0===e&&(e=this.rQlen),this._rQi+=e,new Uint8Array(this._rQ.buffer,this._rQi-e,e)}rQshiftTo(e,t){void 0===t&&(t=this.rQlen),e.set(new Uint8Array(this._rQ.buffer,this._rQi,t)),this._rQi+=t}rQslice(e,t=this.rQlen){return new Uint8Array(this._rQ.buffer,this._rQi+e,t-e)}rQwait(e,t,s){if(this.rQlen<t){if(s){if(this._rQi<s)throw new Error("rQwait cannot backup "+s+" bytes");this._rQi-=s}return!0}return!1}flush(){this._sQlen>0&&this._websocket.readyState===WebSocket.OPEN&&(this._websocket.send(this._encode_message()),this._sQlen=0)}send(e){this._sQ.set(e,this._sQlen),this._sQlen+=e.length,this.flush()}send_string(e){this.send(e.split("").map((e=>e.charCodeAt(0))))}off(e){this._eventHandlers[e]=()=>{}}on(e,t){this._eventHandlers[e]=t}_allocate_buffers(){this._rQ=new Uint8Array(this._rQbufferSize),this._sQ=new Uint8Array(this._sQbufferSize)}init(){this._allocate_buffers(),this._rQi=0,this._websocket=null}open(e,t){this.init(),this._websocket=new WebSocket(e,t),this._websocket.binaryType="arraybuffer",this._websocket.onmessage=this._recv_message.bind(this),this._websocket.onopen=()=>{Log.Debug(">> WebSock.onopen"),this._websocket.protocol&&Log.Info("Server choose sub-protocol: "+this._websocket.protocol),this._eventHandlers.open(),Log.Debug("<< WebSock.onopen")},this._websocket.onclose=e=>{Log.Debug(">> WebSock.onclose"),this._eventHandlers.close(e),Log.Debug("<< WebSock.onclose")},this._websocket.onerror=e=>{Log.Debug(">> WebSock.onerror: "+e),this._eventHandlers.error(e),Log.Debug("<< WebSock.onerror: "+e)}}close(){this._websocket&&(this._websocket.readyState!==WebSocket.OPEN&&this._websocket.readyState!==WebSocket.CONNECTING||(Log.Info("Closing WebSocket connection"),this._websocket.close()),this._websocket.onmessage=()=>{})}_encode_message(){return new Uint8Array(this._sQ.buffer,0,this._sQlen)}_expand_compact_rQ(e){const t=8*(this._rQlen-this._rQi+e),s=this._rQbufferSize<t;if(s&&(this._rQbufferSize=Math.max(2*this._rQbufferSize,t)),this._rQbufferSize>41943040&&(this._rQbufferSize=41943040,this._rQbufferSize-this.rQlen<e))throw new Error("Receive Queue buffer exceeded 41943040 bytes, and the new message could not fit");if(s){const e=this._rQ.buffer;this._rQ=new Uint8Array(this._rQbufferSize),this._rQ.set(new Uint8Array(e,this._rQi,this._rQlen-this._rQi))}else this._rQ.set(new Uint8Array(this._rQ.buffer,this._rQi,this._rQlen-this._rQi));this._rQlen=this._rQlen-this._rQi,this._rQi=0}_decode_message(e){const t=new Uint8Array(e);t.length>this._rQbufferSize-this._rQlen&&this._expand_compact_rQ(t.length),this._rQ.set(t,this._rQlen),this._rQlen+=t.length}_recv_message(e){this._decode_message(e.data),this.rQlen>0?(this._eventHandlers.message(),this._rQlen==this._rQi&&(this._rQlen=0,this._rQi=0)):Log.Debug("Ignoring empty message")}}
//# sourceMappingURL=/sm/28a002369b713d642906f92037b99f077203c6f68f92e4177157de31edd7575c.map