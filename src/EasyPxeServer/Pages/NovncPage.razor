@page "/novnc"
@using EasyPxeServer.Components
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>noVNC远程控制</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">noVNC远程控制</h1>
    
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h3>远程桌面连接</h3>
        </div>
        <div class="card-body">
            <div class="novnc-page-container">
                <NoVncViewer 
                    @ref="_noVncViewer"
                    Host="@Host"
                    Port="@Port"
                    Password="@Password"
                    OnConnectionStateChanged="HandleConnectionStateChanged"
                    OnConnectionError="HandleConnectionError"/>
            </div>
        </div>
        <div class="card-footer bg-light">
            <div class="connection-stats">
                <span class="status-indicator">状态: <strong>@ConnectionStatus</strong></span>
                <span class="separator">|</span>
                <span class="help-text">提示: 使用Ctrl+Alt+Del组合键可以发送到远程服务器</span>
            </div>
        </div>
    </div>

    <!-- 使用说明 -->
    <div class="card mt-4">
        <div class="card-header bg-info text-white">
            <h3>使用说明</h3>
        </div>
        <div class="card-body">
            <div class="usage-instructions">
                <ol>
                    <li>在上方输入VNC服务器的主机地址和端口号</li>
                    <li>如果VNC服务器设置了密码，请输入密码</li>
                    <li>点击"连接"按钮开始远程控制会话</li>
                    <li>连接成功后，可以直接在浏览器中控制远程桌面</li>
                    <li>使用鼠标和键盘与远程桌面交互</li>
                    <li>点击"断开连接"按钮结束远程控制会话</li>
                </ol>
                <div class="tips">
                    <h4>注意事项：</h4>
                    <ul>
                        <li>请确保VNC服务器已正确配置并允许连接</li>
                        <li>某些VNC服务器可能需要额外的配置以支持WebSocket连接</li>
                        <li>对于安全性要求较高的环境，建议使用SSL/TLS加密连接</li>
                        <li>网络速度和延迟可能会影响远程控制的流畅度</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private NoVncViewer _noVncViewer;
    private string Host { get; set; } = "10.10.10.10"; // 默认主机地址
    private int Port { get; set; } = 5901; // 默认VNC端口
    private string Password { get; set; } = string.Empty;
    private string ConnectionStatus { get; set; } = "未连接";

    protected override void OnInitialized()
    {
        // 可以从配置或URL参数中读取默认连接信息
        var hostParam = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(
            new Uri(NavigationManager.Uri).Query).TryGetValue("host", out var hostValues);
        var portParam = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(
            new Uri(NavigationManager.Uri).Query).TryGetValue("port", out var portValues);
        
        if (hostParam && !string.IsNullOrEmpty(hostValues.FirstOrDefault()))
        {
            Host = hostValues.FirstOrDefault();
        }
        
        if (portParam && !string.IsNullOrEmpty(portValues.FirstOrDefault()) && int.TryParse(portValues.FirstOrDefault(), out int port))
        {
            Port = port;
        }
    }

    private async Task HandleConnectionStateChanged(bool isConnected)
    {
        if (isConnected)
        {
            ConnectionStatus = "已连接";
            await JSRuntime.InvokeVoidAsync("alert", $"已成功连接到VNC服务器：{Host}:{Port}");
        }
        else
        {
            ConnectionStatus = "未连接";
        }
        
        StateHasChanged();
    }

    private async Task HandleConnectionError(string errorMessage)
    {
        ConnectionStatus = "连接错误";
        await JSRuntime.InvokeVoidAsync("alert", $"VNC连接错误：{errorMessage}");
        StateHasChanged();
    }

    // 处理Ctrl+Alt+Del组合键
    [JSInvokable("HandleCtrlAltDel")]
    public async Task HandleCtrlAltDel()
    {
        // 在实际实现中，这里应该发送Ctrl+Alt+Del组合键到VNC服务器
        // 这通常需要特殊处理，因为Ctrl+Alt+Del是操作系统级别的快捷键
        await JSRuntime.InvokeVoidAsync("alert", "Ctrl+Alt+Del已发送到远程服务器");
    }
}

<style>
    .novnc-page-container {
        width: 100%;
        height: 600px; /* 设置固定高度，或者根据需要调整 */
        border: 1px solid #ddd;
        border-radius: 5px;
        overflow: hidden;
    }

    .connection-stats {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 14px;
        color: #666;
    }

    .status-indicator {
        font-weight: 500;
    }

    .separator {
        margin: 0 10px;
        color: #ccc;
    }

    .help-text {
        font-style: italic;
        font-size: 12px;
    }

    .usage-instructions {
        line-height: 1.6;
    }

    .usage-instructions ol,
    .usage-instructions ul {
        padding-left: 20px;
    }

    .usage-instructions li {
        margin-bottom: 8px;
    }

    .tips {
        margin-top: 20px;
        padding: 15px;
        background-color: #f8f9fa;
        border-left: 4px solid #007bff;
        border-radius: 4px;
    }

    .tips h4 {
        margin-top: 0;
        margin-bottom: 10px;
        color: #007bff;
    }

    /* 响应式设计已移除，以避免构建错误 */
</style>