@page "/vnc"
@using System.Net
@using System.Net.Sockets
@using EasyPxeServer.Services
@using EasyPxeServer.Components
@using MarcusW.VncClient
@inject IJSRuntime JsRuntime;

@inject VncService VncService

<PageTitle>VNC控制台</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">VNC控制台</h1>

    <!-- 连接表单 -->
    <div class="card mb-4">
        <div class="card-header bg-info text-white">
            <h3>新建VNC连接</h3>
        </div>
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                    <label class="form-label font-weight-bold">主机地址</label>
                    <input
                        type="text"
                        class="form-control"
                        @bind="Host"
                        placeholder="输入VNC服务器IP地址"
                        required/>
                </div>
                <div>
                    <label class="form-label font-weight-bold">端口</label>
                    <input
                        type="number"
                        class="form-control"
                        @bind="Port"
                        min="1"
                        max="65535"
                        required/>
                </div>
                <div>
                    <label class="form-label font-weight-bold">密码（可选）</label>
                    <input
                        type="password"
                        class="form-control"
                        @bind="Password"
                        placeholder="输入VNC密码（如果有）"/>
                </div>
            </div>
            <div class="mt-4 text-right">
                <button
                    class="btn btn-primary"
                    @onclick="ConnectToVncAsync"
                    disabled="@Connecting">
                    @(Connecting ? "连接中..." : "连接")
                </button>
            </div>
        </div>
    </div>

    <!-- 活跃会话列表 -->
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h3>活跃会话</h3>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th>会话ID</th>
                        <th>主机</th>
                        <th>端口</th>
                        <th>连接时间</th>
                        <th>状态</th>
                        <th>操作</th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (ActiveSessions.Count == 0)
                    {
                        <tr>
                            <td colspan="6" class="text-center">没有活跃的VNC会话</td>
                        </tr>
                    }
                    else
                    {
                        foreach (var session in ActiveSessions)
                        {
                            <tr>
                                <td>@session.SessionId.Substring(0, 8)...</td>
                                <td>@session.Host</td>
                                <td>@session.Port</td>
                                <td>@session.ConnectedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                <td>
                                    <span class="badge @(session.IsConnected ? "bg-success" : "bg-danger") text-white">
                                        @(session.IsConnected ? "已连接" : "已断开")
                                    </span>
                                </td>
                                <td>
                                    @if (session.IsConnected)
                                    {
                                        <button
                                            class="btn btn-info btn-sm mr-2"
                                            @onclick="() => SelectSession(session.SessionId)">
                                            查看
                                        </button>
                                    }
                                    <button
                                        class="btn btn-danger btn-sm"
                                        @onclick="() => DisconnectSessionAsync(session.SessionId)">
                                        断开
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- VNC查看器 -->
    @if (SelectedSessionId != null)
    {
        <div class="card">
            <div class="card-header bg-success text-white">
                <div class="d-flex justify-content-between align-items-center">
                    <h3>VNC查看器 - @GetSessionHost(SelectedSessionId)</h3>
                    <button
                        class="btn btn-danger btn-sm"
                        @onclick="() => SelectedSessionId = null">
                        关闭
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="vnc-container">
                    @if (ConnectionError)
                    {
                        <div class="error-message">
                            <h4>连接错误</h4>
                            <p>无法连接到VNC服务器或连接已断开。</p>
                            <button
                                class="btn btn-primary"
                                @onclick="ReconnectAsync">
                                重新连接
                            </button>
                        </div>
                    }
                    else
                    {
                        <VncView
                            @ref="VncViewRef"
                            Connection="CurrentConnection"
                            OnConnectionError="HandleConnectionError"
                            OnConnectionClosed="HandleConnectionClosed"/>
                    }
                </div>
            </div>
        </div>
    }
</div>

<style>
    .vnc-container {
        width: 100%;
        height: 600px;
        border: 1px solid #ddd;
        overflow: auto;
        background-color: #f5f5f5;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .error-message {
        text-align: center;
        padding: 20px;
        background-color: #ffebee;
        border-radius: 5px;
        width: 80%;
    }

    /* 模态框样式 */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        width: 90%;
        max-width: 500px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        margin-top: 15px;
    }

    .close {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
    }
</style>

@code {
    private string         Host              { get; set; } = "10.10.10.10";
    private int            Port              { get; set; } = 5901;
    private string         Password          { get; set; } = string.Empty;
    private bool           Connecting        { get; set; } = false;
    private string?        SelectedSessionId { get; set; }
    private RfbConnection? CurrentConnection { get; set; }
    private VncView?       VncViewRef        { get; set; }
    private bool           ConnectionError   { get; set; } = false;

    private List<VncSessionInfo> ActiveSessions => VncService.GetActiveSessions();

    protected override void OnInitialized()
    {
        // 监听会话变化
        VncService.SessionCreated += (id, sess) => InvokeAsync(() => OnSessionCreated(id, sess));
        VncService.SessionClosed += (id) => InvokeAsync(() => OnSessionClosed(id)); ;
    }

    private async Task ConnectToVncAsync()
    {
        if (string.IsNullOrEmpty(Host)
         || Port <= 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "请输入有效的主机地址和端口");
            return;
        }

        try
        {
            Connecting = true;
            var sessionId = await VncService.CreateSessionAsync(Host, Port, Password);
            SelectSession(sessionId);
            //await JsRuntime.InvokeVoidAsync("alert", "VNC连接已建立");
            await InvokeAsync(() => JsRuntime.InvokeVoidAsync("alert", "VNC连接已建立"));
        }
        catch (Exception ex) { await JsRuntime.InvokeVoidAsync("alert", "连接VNC服务器失败：" + ex.Message); }
        finally { Connecting = false; }
    }

    private void SelectSession(string sessionId)
    {
        var session = VncService.GetSession(sessionId);
        if (session is { Connection: not null })
        {
            SelectedSessionId = sessionId;
            CurrentConnection = session.Connection;
            ConnectionError   = false;
        }
    }

    private async Task DisconnectSessionAsync(string sessionId)
    {
        try
        {
            var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "确定要断开此VNC会话吗？");
            if (confirmed)
            {
                await VncService.CloseSessionAsync(sessionId);
                if (SelectedSessionId == sessionId)
                {
                    SelectedSessionId = null;
                    CurrentConnection = null;
                }

                await JsRuntime.InvokeVoidAsync("alert", "VNC会话已断开");
            }
        }
        catch (Exception ex) { await JsRuntime.InvokeVoidAsync("alert", "断开VNC会话失败：" + ex.Message); }
    }

    private async Task ReconnectAsync()
    {
        if (SelectedSessionId == null)
            return;

        try
        {
            var session = VncService.GetSession(SelectedSessionId);
            if (session != null)
            {
                // 记录连接信息
                var host = session.Host;
                var port = session.Port;

                // 先断开旧连接
                await VncService.CloseSessionAsync(SelectedSessionId);

                // 重新连接
                var newSessionId = await VncService.CreateSessionAsync(host, port, Password);
                SelectSession(newSessionId);
                ConnectionError = false;
                await JsRuntime.InvokeVoidAsync("alert", "VNC连接已重新建立");
            }
        }
        catch (Exception ex) { await JsRuntime.InvokeVoidAsync("alert", "重新连接失败：" + ex.Message); }
    }

    private void HandleConnectionError(Exception ex)
    {
        ConnectionError = true;
        Console.WriteLine("VNC连接错误：" + ex.Message);
    }

    private void HandleConnectionClosed()
    {
        ConnectionError = true;
        Console.WriteLine("VNC连接已关闭");
    }

    private string GetSessionHost(string sessionId)
    {
        var session = VncService.GetSession(sessionId);
        return session != null ? $"{session.Host}:{session.Port}" : "未知主机";
    }

    private void OnSessionCreated(string sessionId, VncSession session) { StateHasChanged(); }

    private void OnSessionClosed(string sessionId)
    {
        if (SelectedSessionId == sessionId)
        {
            SelectedSessionId = null;
            CurrentConnection = null;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        VncService.SessionCreated -= OnSessionCreated;
        VncService.SessionClosed  -= OnSessionClosed;
    }

}