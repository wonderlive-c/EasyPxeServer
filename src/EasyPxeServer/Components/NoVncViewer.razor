@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop

@namespace EasyPxeServer.Components

<div class="novnc-viewer-container">
    <div class="novnc-controls">
        @if (!IsConnected)
        {
            <div class="connection-form">
                <div class="form-group">
                    <label for="novnc-host">主机地址</label>
                    <input type="text" id="novnc-host" class="form-control" @bind="Host" placeholder="VNC服务器IP地址" />
                </div>
                <div class="form-group">
                    <label for="novnc-port">端口</label>
                    <input type="number" id="novnc-port" class="form-control" @bind="Port" min="1" max="65535" />
                </div>
                <div class="form-group">
                    <label for="novnc-password">密码（可选）</label>
                    <input type="password" id="novnc-password" class="form-control" @bind="Password" placeholder="VNC密码" />
                </div>
                <button class="btn btn-primary" @onclick="ConnectToVncAsync" disabled="@Connecting">
                    @(Connecting ? "连接中..." : "连接")
                </button>
            </div>
        }
        else
        {
            <div class="status-info">
                <span>已连接到: @Host:@Port</span>
                <button class="btn btn-danger" @onclick="DisconnectAsync">断开连接</button>
            </div>
        }
    </div>
    
    <div class="novnc-display-container">
        <!-- 始终渲染novnc-display元素，保证连接过程中可以找到它 -->
        <div id="novnc-container" class="noVNC_container" style="width: 100%; height: 100%; position: relative;">
            <div id="novnc-display" class="noVNC_display" style="@(IsConnected ? "display: block" : "display: none");"></div>
            
            <!-- 覆盖层信息 -->
            @if (ConnectionError)
            {
                <div class="error-message" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; display: flex; flex-direction: column; justify-content: center; align-items: center; background-color: rgba(255, 255, 255, 0.9);">
                    <h4>连接错误</h4>
                    <p>@ErrorMessage</p>
                    <button class="btn btn-primary" @onclick="ConnectToVncAsync">重新连接</button>
                </div>
            }
            else if (Connecting)
            {
                <div class="loading-message" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; display: flex; flex-direction: column; justify-content: center; align-items: center; background-color: rgba(255, 255, 255, 0.9);">
                    <h4>正在连接...</h4>
                    <p>正在连接到VNC服务器，请稍候...</p>
                </div>
            }
            else if (!IsConnected)
            {
                <div class="placeholder-message" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; display: flex; flex-direction: column; justify-content: center; align-items: center; background-color: rgba(255, 255, 255, 0.9);">
                    <h4>noVNC远程控制</h4>
                    <p>请输入VNC服务器信息并点击连接按钮开始远程控制</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Parameter]
    public string Host { get; set; } = "localhost";

    [Parameter]
    public int Port { get; set; } = 5900;

    [Parameter]
    public string Password { get; set; } = "";

    [Parameter]
    public EventCallback<bool> OnConnectionStateChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnConnectionError { get; set; }

    public bool IsConnected { get; private set; } = false;
    public bool Connecting { get; private set; } = false;
    public bool ConnectionError { get; private set; } = false;
    public string ErrorMessage { get; private set; } = "";

    private DotNetObjectReference<NoVncViewer> _dotNetRef;
    private string _connectionId = string.Empty;

    protected override void OnInitialized()
    {
        _dotNetRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // 加载noVNC的JavaScript和CSS文件
            await JSRuntime.InvokeVoidAsync("loadNoVNC");
        }
    }

    public async Task ConnectToVncAsync()
    {
        if (string.IsNullOrEmpty(Host))
        {
            ConnectionError = true;
            ErrorMessage = "请输入有效的主机地址";
            await OnConnectionError.InvokeAsync(ErrorMessage);
            return;
        }

        if (Port <= 0 || Port > 65535)
        {
            ConnectionError = true;
            ErrorMessage = "请输入有效的端口号（1-65535）";
            await OnConnectionError.InvokeAsync(ErrorMessage);
            return;
        }

        Connecting = true;
        ConnectionError = false;
        ErrorMessage = "";

        // 强制渲染UI以显示连接状态
        StateHasChanged();
        await Task.Delay(100); // 给UI一点时间来更新

        try
        {
            // 生成唯一的连接ID
            _connectionId = Guid.NewGuid().ToString();

            // 构建WebSocket URL，指向我们的WebSocket代理控制器
            // 这里使用相对路径，自动适应HTTP或HTTPS环境
            var baseUrl = $"{NavigationManager.BaseUri}".Replace("http://", "ws://").Replace("https://", "wss://");
            string wsUrl = $"{baseUrl}websockify?host={Host}&port={Port}";

            // 直接检查novnc-display元素是否存在，避免依赖外部全局函数
            bool elementExists = await JSRuntime.InvokeAsync<bool>("eval", "!!document.getElementById('novnc-display')");
            if (!elementExists)
            {
                Connecting = false;
                ConnectionError = true;
                ErrorMessage = "无法找到显示元素，请刷新页面后重试";
                await OnConnectionError.InvokeAsync(ErrorMessage);
                return;
            }

            // 调用JavaScript方法来初始化noVNC连接
            await JSRuntime.InvokeVoidAsync(
                "initNoVNC", 
                "novnc-display",
                wsUrl,
                _connectionId,
                _dotNetRef,
                Password
            );
        }
        catch (Exception ex)
        {
            Connecting = false;
            ConnectionError = true;
            ErrorMessage = "连接失败：" + ex.Message;
            await OnConnectionError.InvokeAsync(ErrorMessage);
        }
    }

    public async Task DisconnectAsync()
    {
        if (IsConnected)
        {
            await JSRuntime.InvokeVoidAsync("disconnectNoVNC", _connectionId);
            await HandleDisconnect();
        }
    }

    [JSInvokable("HandleConnect")]
    public async Task HandleConnect()
    {
        Connecting = false;
        IsConnected = true;
        ConnectionError = false;
        await OnConnectionStateChanged.InvokeAsync(true);
    }

    [JSInvokable("HandleDisconnect")]
    public async Task HandleDisconnect()
    {
        Connecting = false;
        IsConnected = false;
        await OnConnectionStateChanged.InvokeAsync(false);
    }

    [JSInvokable("HandleError")]
    public async Task HandleError(string message)
    {
        Connecting = false;
        IsConnected = false;
        ConnectionError = true;
        ErrorMessage = message;
        await OnConnectionError.InvokeAsync(message);
    }

    [JSInvokable("HandleBell")]
    public void HandleBell()
    {
        // 处理远程服务器的响铃事件
        Console.WriteLine("VNC server bell");
    }

    [JSInvokable("HandleClipboard")]
    public void HandleClipboard(string text)
    {
        // 处理剪贴板事件
        Console.WriteLine("Clipboard text received: " + text);
    }

    public async ValueTask DisposeAsync()
    {
        if (IsConnected)
        {
            await DisconnectAsync();
        }
        _dotNetRef?.Dispose();
    }
}

<style>
    .novnc-viewer-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        width: 100%;
        border: 1px solid #ddd;
        border-radius: 5px;
        overflow: hidden;
    }

    .novnc-controls {
        padding: 15px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #ddd;
    }

    .connection-form {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        align-items: flex-end;
    }

    .form-group {
        flex: 1;
        min-width: 150px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .btn-danger:hover {
        background-color: #c82333;
    }

    .status-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .novnc-display-container {
        flex: 1;
        position: relative;
        overflow: hidden;
        background-color: #f5f5f5;
    }

    .loading-message,
    .placeholder-message,
    .error-message {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        padding: 20px;
        background-color: white;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        max-width: 80%;
    }

    .error-message {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
    }

    .loading-message h4,
    .placeholder-message h4,
    .error-message h4 {
        margin-top: 0;
        margin-bottom: 10px;
    }

    /* 响应式设计已移除，以避免构建错误 */
</style>