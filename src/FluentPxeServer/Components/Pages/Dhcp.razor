@page "/dhcp"
@using PxeServices.Entities.Dhcp
@using PxeStorageLite
@using FluentPxeServer.Components.Settings
@using PxeServices.Entities.Settings
@using System.Net
@inject IDhcpUserRepository      Repository
@inject IToastService            ToastService
@inject IDialogService           DialogService
@inject IObjectSettingRepository ObjectSettingRepository

<PageTitle>DHCP服务</PageTitle>

<FluentStack Orientation="Orientation.Vertical">
    <!-- 操作按钮：靠右对齐 -->
    <FluentStack Orientation="Orientation.Horizontal"Style="width:100%; margin-top:12px;">
        <FluentButton @onclick="OpenSettingDialog" Title="新增用户">
            设置
        </FluentButton>
        <FluentButton @onclick="AddUser" Title="新增用户">
            新增用户
        </FluentButton>
    </FluentStack>
    <!-- 用户表格 -->
    <FluentStack Orientation="Orientation.Vertical" Style="width:100%;">
        <FluentDataGrid Items="DhcpUsers" Style="margin-top: 12px;">
            <PropertyColumn Property="@(x => x.MacAddress)" Title="MAC 地址" MinWidth="180"/>
            <PropertyColumn Property="@(x => x.IpAddress)" Title="IP 地址" MinWidth="180"/>
            <TemplateColumn Title="操作" MinWidth="140">
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentButton Title="修改" @onclick="() => UpdateUser(context)">修改</FluentButton>
                        <FluentButton Title="删除" @onclick="() => DeleteUser(context.Id)">删除</FluentButton>
                    </FluentStack>
            </TemplateColumn>
        </FluentDataGrid>
    </FluentStack>
</FluentStack>

<!--add-->
<FluentDialog Hidden="true"></FluentDialog>
<!--update-->
<FluentDialog Hidden="true"></FluentDialog>

@code {

    private IQueryable<DhcpUser> DhcpUsers { get; set; }

    protected override async Task OnInitializedAsync() { DhcpUsers = (await Repository.GetListAsync()).AsQueryable(); }

    private Task AddUser()
    {
        ToastService.ShowInfo("新增用户");
        return Task.CompletedTask;
    }

    private Task UpdateUser(DhcpUser name)
    {
        ToastService.ShowInfo("修改用户" + name.IpAddress);
        return Task.CompletedTask;
    }

    private async Task DeleteUser(Guid id)
    {
        await Repository.DeleteAsync(id);
        DhcpUsers = (await Repository.GetListAsync()).AsQueryable();
        ToastService.ShowSuccess("删除成功");
        StateHasChanged();
    }

    private async Task OpenSettingDialog()
    {
        var dhcpSetting = await ObjectSettingRepository.GetObjectSettingAsync<DhcpSetting>() ?? DhcpSetting.Default;
        var paramSetting = new DhcpTempForBind()
        {
            // 将 dhcpSetting 映射到字符串字段（安全 null 检查）
            serverName           = dhcpSetting?.ServerName                   ?? string.Empty,
            dhcpEnabled          = dhcpSetting?.DhcpEnabled                  ?? false,
            dhcpStartAddressStr  = dhcpSetting?.DhcpStartAddress?.ToString() ?? string.Empty,
            dhcpEndAddressStr    = dhcpSetting?.DhcpEndAddress?.ToString()   ?? string.Empty,
            dhcpSubnetMaskStr    = dhcpSetting?.DhcpSubnetMask?.ToString()   ?? string.Empty,
            dhcpGatewayStr       = dhcpSetting?.DhcpGateway?.ToString()      ?? string.Empty,
            broadcastStr         = dhcpSetting?.Broadcast?.ToString()        ?? string.Empty,
            domainName           = dhcpSetting?.DomainName                   ?? string.Empty,
            serverIdentifierStr  = dhcpSetting?.ServerIdentifier?.ToString() ?? string.Empty,
            domainNameServersStr = dhcpSetting?.DomainNameServers != null ? string.Join(", ", dhcpSetting.DomainNameServers.Select(ip => ip.ToString())) : string.Empty,
            serverIpAddressStr   = dhcpSetting?.ServerIpAddress?.ToString() ?? string.Empty,
            tftpServerName       = dhcpSetting?.TFTPServerName              ?? string.Empty,
            bootFile             = dhcpSetting?.BootFile                    ?? string.Empty,
            lastCountStr         = dhcpSetting?.LastCount.ToString()        ?? "0"
        };

        var _dialog = await DialogService.ShowPanelAsync<DhcpSettings>(paramSetting,
                                                                       new DialogParameters()
                                                                       {
                                                                           ShowTitle       = true,
                                                                           Title           = "DHCP设置",
                                                                           Alignment       = HorizontalAlignment.Right,
                                                                           PrimaryAction   = "保存",
                                                                           SecondaryAction = "取消",
                                                                           ShowDismiss     = true,
                                                                           TrapFocus       = false
                                                                       });

        var data = await _dialog.Result;
        if (!data.Cancelled) { await SaveDhcpAsync(dhcpSetting!, data.Data as DhcpTempForBind); }

        await _dialog.CloseAsync();
    }

    private async Task SaveDhcpAsync(DhcpSetting setting, DhcpTempForBind? data)
    {
        try
        {
            // 验证并转换 IP 类型字段
            IPAddress ParseIp(string s, string fieldName)
            {
                if (string.IsNullOrWhiteSpace(s)) return null;
                if (IPAddress.TryParse(s.Trim(), out var ip))
                    return ip;
                throw new FormatException($"字段 {fieldName} 不是有效的 IP 地址：{s}");
            }

            IPAddress[] ParseIpArray(string s)
            {
                if (string.IsNullOrWhiteSpace(s)) return Array.Empty<IPAddress>();
                var parts = s.Split(new[] { ',', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).Select(p => p.Trim()).Where(p => !string.IsNullOrEmpty(p)).ToArray();
                var list  = new List<IPAddress>();
                foreach (var p in parts)
                {
                    if (IPAddress.TryParse(p, out var ip))
                        list.Add(ip);
                    else
                        throw new FormatException($"DNS 列表中存在无效 IP 地址：{p}");
                }

                return list.ToArray();
            }

            int ParseInt(string s, string fieldName)
            {
                if (string.IsNullOrWhiteSpace(s)) return 0;
                if (int.TryParse(s.Trim(), out var v))
                    return v;
                throw new FormatException($"字段 {fieldName} 不是有效整数：{s}");
            }

            setting.ServerName        = data.serverName;
            setting.DhcpEnabled       = data.dhcpEnabled;
            setting.DhcpStartAddress  = ParseIp(data.dhcpStartAddressStr, "DhcpStartAddress");
            setting.DhcpEndAddress    = ParseIp(data.dhcpEndAddressStr,   "DhcpEndAddress");
            setting.DhcpSubnetMask    = ParseIp(data.dhcpSubnetMaskStr,   "DhcpSubnetMask");
            setting.DhcpGateway       = ParseIp(data.dhcpGatewayStr,      "DhcpGateway");
            setting.Broadcast         = ParseIp(data.broadcastStr,        "Broadcast");
            setting.DomainName        = data.domainName;
            setting.ServerIdentifier  = ParseIp(data.serverIdentifierStr, "ServerIdentifier");
            setting.DomainNameServers = ParseIpArray(data.domainNameServersStr);
            setting.ServerIpAddress   = ParseIp(data.serverIpAddressStr, "ServerIpAddress");
            setting.TFTPServerName    = data.tftpServerName;
            setting.BootFile          = data.bootFile;
            setting.LastCount         = ParseInt(data.lastCountStr, "LastCount");

            await ObjectSettingRepository.SetObjectSettingAsync(setting);

            ToastService.ShowSuccess("DHCP设置保存成功");
        }
        catch (Exception e) { ToastService.ShowError("DHCP设置保存失败：" + e.Message); }
    }

    public class DhcpTempForBind
    {
        // 临时绑定字段（字符串形式便于输入/验证）
        public string serverName;
        public bool   dhcpEnabled;
        public string dhcpStartAddressStr;
        public string dhcpEndAddressStr;
        public string dhcpSubnetMaskStr;
        public string dhcpGatewayStr;
        public string broadcastStr;
        public string domainName;
        public string serverIdentifierStr;
        public string domainNameServersStr;
        public string serverIpAddressStr;
        public string tftpServerName;
        public string bootFile;
        public string lastCountStr;
    }

}