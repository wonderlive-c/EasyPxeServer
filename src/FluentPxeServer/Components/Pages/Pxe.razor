@page "/pxe"
@inject PxeServerService PxeServerService
@inject DhcpService      DhcpService
@inject TftpService      TftpService
@inject IToastService    ToastService
@inject IDialogService   DialogService
@using PxeServices


<PageTitle>PXE服务器管理</PageTitle>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentCard AreaRestricted="false" MinimalStyle="true">
            <FluentStack>
                <FluentLabel>选择网络接口</FluentLabel>
                <FluentSelect Items="NetworkInterfaces"
                              OptionText="@(i => i.Name + " - " + i.IPAddress)"
                              OptionValue="@(i => i.IPAddress)"
                              @bind-Value="SelectedInterfaceIp"
                              Disabled="@PxeServerService.IsRunning">
                </FluentSelect>
            </FluentStack>
        </FluentCard>

        <FluentCard MinimalStyle="true">
            <FluentGrid>

                <FluentGridItem>
                    <FluentStack Orientation="Orientation.Horizontal">
                        <FluentLabel>当前状态：</FluentLabel>
                        <FluentBadge Appearance="@(PxeServerService.IsRunning ? Appearance.Accent : Appearance.Neutral)" BackgroundColor="@(PxeServerService.IsRunning ? "Green" : "Red")">
                            @(PxeServerService.IsRunning ? "运行中" : "已停止")
                        </FluentBadge>
                    </FluentStack>
                </FluentGridItem>
                <FluentGridItem>
                    <FluentButton Appearance="Appearance.Accent"
                                  @onclick="StartServerAsync"
                                  disabled="@PxeServerService.IsRunning">
                        启动服务器
                    </FluentButton>
                    <FluentButton Appearance="Appearance.Neutral"
                                  @onclick="StopServerAsync"
                                  disabled="@(!PxeServerService.IsRunning)">
                        停止服务器
                    </FluentButton>
                    <FluentButton Appearance="Appearance.Accent"
                                  @onclick="RestartServerAsync"
                                  disabled="@(!PxeServerService.IsRunning)">
                        重启服务器
                    </FluentButton>
                </FluentGridItem>

                <FluentGridItem>
                    <FluentLabel>DHCP服务器：@(DhcpService.IsRunning ? "运行中" : "已停止")</FluentLabel>
                </FluentGridItem>
                <FluentGridItem>
                    <FluentLabel>TFTP服务器：@(TftpService.IsRunning ? "运行中" : "已停止")</FluentLabel>
                </FluentGridItem>
            </FluentGrid>
        </FluentCard>
      
    </FluentStack>
@code {

    private List<NetworkInterfaceInfo> NetworkInterfaces   { get; set; } = [];
    private string?                    SelectedInterfaceIp { get; set; }

    protected override void OnInitialized()
    {
        // 获取网络接口列表
        NetworkInterfaces = PxeServerService.GetNetworkInterfaces();
        if (string.IsNullOrEmpty(SelectedInterfaceIp)) { SelectedInterfaceIp = DhcpService.NextServerIp ; }

        // 监听状态变化
        PxeServerService.StatusChanged += delegate { InvokeAsync(StateHasChanged); };
    }

    private async Task StartServerAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(SelectedInterfaceIp))
            {
                var dialogInstance = await DialogService.ShowDialogAsync(@<div>
                                                                             <p> 请先选择网络接口 </p>
                                                                         </div>,
                                                                         new DialogParameters
                                                                         {
                                                                             Title = $"提示", TrapFocus = false, DialogType = DialogType.MessageBox, Modal = false, ShowDismiss = false, PrimaryAction = "确定"
                                                                         });
                await dialogInstance.Result;
                await dialogInstance.CloseAsync();
                return;
            }

            // 设置服务的网络接口
            DhcpService.SelectedInterfaceIp = SelectedInterfaceIp;

            // 如果没有设置下一跳服务器IP，默认使用选定的接口IP
            if (string.IsNullOrEmpty(DhcpService.NextServerIp)) { DhcpService.NextServerIp = SelectedInterfaceIp; }

            await PxeServerService.StartAsync(default);
            ToastService.ShowSuccess("PXE服务器已成功启动");
        }
        catch (Exception ex) { ToastService.ShowError("启动服务器失败：" + ex.Message, 3000); }
    }


    private async Task StopServerAsync()
    {
        try
        {
            await PxeServerService.StopAsync(default);
            ToastService.ShowSuccess("PXE服务器已成功停止");
        }
        catch (Exception ex) { ToastService.ShowError("停止服务器失败：" + ex.Message, 3000); }
    }

    private async Task RestartServerAsync()
    {
        try
        {
            await PxeServerService.RestartAsync(default);
            ToastService.ShowSuccess("PXE服务器已成功重启");
        }
        catch (Exception ex) { ToastService.ShowError("重启服务器失败：" + ex.Message, 3000); }
    }

    public void Dispose() { PxeServerService.StatusChanged -= StateHasChanged; }
}