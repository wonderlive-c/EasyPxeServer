@page "/vnc"
@using PxeServices
@using PxeServices.Entities.VncClient
@inject VncService        VncService
@inject IJSRuntime        JsRuntime
@inject NavigationManager NavigationManager

<PageTitle>VNC 控制台</PageTitle>

<FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch">

    <!-- 连接参数表单 -->
    <FluentGrid>
        <FluentGridItem >
            <FluentStack Orientation="Orientation.Vertical">
                <FluentLabel>主机地址</FluentLabel>
                <FluentTextField @bind-Value="@Host"
                                 Placeholder="例如: 192.168.1.100"
                                 Required="true"/>
            </FluentStack>
        </FluentGridItem>
        <FluentGridItem >
            <FluentStack Orientation="Orientation.Vertical">
                <FluentLabel>端口号</FluentLabel>
                <FluentNumberField @bind-Value="Port"
                                   Min="1"
                                   Max="65535"
                                   Required="true"/>
            </FluentStack>
        </FluentGridItem>
    </FluentGrid>

    <FluentGrid>
        <FluentGridItem >
            <FluentStack Orientation="Orientation.Vertical">
                <FluentLabel>密码（可选）</FluentLabel>
                <FluentTextField @bind-Value="@Password"
                                 Placeholder="输入VNC密码" TextFieldType="TextFieldType.Password"/>
            </FluentStack>
        </FluentGridItem>
    </FluentGrid>

    <FluentGrid>
        <FluentGridItem >
            <FluentStack Orientation="Orientation.Vertical">
                <FluentLabel>连接名称（可选）</FluentLabel>
                <FluentTextField @bind-Value="@ConnectionName"
                                 Placeholder="为连接命名"/>
            </FluentStack>
        </FluentGridItem>
        <FluentGridItem >
            <FluentStack Orientation="Orientation.Vertical">
                <FluentLabel>屏幕大小</FluentLabel>
                <FluentSelect TOption="string"
                              @bind-Value="ScreenSize">
                    <FluentOption Value="800x600">800 x 600</FluentOption>
                    <FluentOption Value="1024x768">1024 x 768</FluentOption>
                    <FluentOption Value="1280x800">1280 x 800</FluentOption>
                    <FluentOption Value="1366x768">1366 x 768</FluentOption>
                    <FluentOption Value="1920x1080">1920 x 1080</FluentOption>
                    <FluentOption Value="custom">自定义</FluentOption>
                </FluentSelect>
            </FluentStack>
        </FluentGridItem>
    </FluentGrid>

    @if (ScreenSize == "custom")
    {
        <FluentGrid>
            <FluentGridItem>
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentLabel>自定义宽度</FluentLabel>
                    <FluentNumberField Id="customWidth"
                                       @bind-Value="CustomWidth"
                                       Min="320"
                                       Max="4096"/>
                </FluentStack>
            </FluentGridItem>
            <FluentGridItem>
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentLabel>自定义高度</FluentLabel>
                    <FluentNumberField Id="customHeight"
                                       @bind-Value="CustomHeight"
                                       Min="240"
                                       Max="2160"/>
                </FluentStack>
            </FluentGridItem>
        </FluentGrid>
    }

    <FluentStack>
        <FluentButton @onclick="ConnectToVncServer">
            <span>连接VNC服务器</span>
        </FluentButton>
    </FluentStack>

    <!-- 活跃连接列表 -->
    <FluentDataGrid Items="@ActiveConnections" ColumnSortLabels="ColumnSortLabels.Default">
        <PropertyColumn
            Title="连接名称"
            Property="@(x => string.IsNullOrEmpty(x.ConnectionName) ? "未命名连接" : x.ConnectionName)"
            Sortable="true"/>
        <PropertyColumn
            Title="主机"
            Property="@(x => x.Host)"
            Sortable="true"/>
        <PropertyColumn
            Title="端口"
            Property="@(x => x.Port)"
            Sortable="true"/>
        <TemplateColumn Title="操作">
            <FluentButton
                @onclick="() => ReconnectConnection(context.ConnectionId)">
                <span>连接</span>
            </FluentButton>
            <FluentButton
                @onclick="() => RemoveConnection(context.ConnectionId)">

                <FluentIcon Value="@(new Icons.Regular.Size24.Delete())"/>
            </FluentButton>
        </TemplateColumn>
    </FluentDataGrid>
</FluentStack>

@code {

    // 连接参数
    private string Host           { get; set; } = "10.10.10.10";
    private int    Port           { get; set; } = 5901;
    private string Password       { get; set; } = string.Empty;
    private string WebSocketPath  { get; set; } = "websockify";
    private string ConnectionName { get; set; } = string.Empty;
    private string ScreenSize     { get; set; } = "1280x800";
    private int    CustomWidth    { get; set; } = 1280;
    private int    CustomHeight   { get; set; } = 720;

    // 活跃连接列表
    private IQueryable<VncConnection> ActiveConnections { get; set; }


    protected override void OnInitialized()
    {
        // 初始化时加载活跃连接
        UpdateActiveConnections();
    }

    private void UpdateActiveConnections() { ActiveConnections = VncService.GetActiveConnections().AsQueryable(); }

    private async Task ConnectToVncServer() { await ConnectToVncServer(Guid.NewGuid().ToString()); }

    private async Task ConnectToVncServer(string? connectionId)
    {
        // 验证输入
        if (string.IsNullOrWhiteSpace(Host)
         || Port <= 0
         || Port > 65535)
        {
            await JsRuntime.InvokeVoidAsync("alert", "请输入有效的主机地址和端口号");
            return;
        }

        // 创建连接ID
        connectionId ??= Guid.NewGuid().ToString();

        try
        {
            // 创建VNC连接
            var uri    = new Uri(NavigationManager.BaseUri);
            var scheme = uri.Scheme; // 结果："http" 或 "https"
            var host   = uri.Host;   // 结果："localhost" 或 "www.example.com"
            var port   = uri.Port;   // 结果：如 5000、8080，默认端口（80/443）可能为 null
            await VncService.CreateConnection(connectionId, scheme is "http" ? "ws" : "wss", host, port, Host, Port, Password, WebSocketPath);

            // 解析屏幕尺寸
            var width  = CustomWidth;
            var height = CustomHeight;

            if (ScreenSize != "custom")
            {
                var dimensions = ScreenSize.Split('x');
                if (dimensions.Length == 2)
                {
                    int.TryParse(dimensions[0], out width);
                    int.TryParse(dimensions[1], out height);
                }
            }

            // 打开新窗口 - 直接调用已在页面中定义的函数
            //await JSRuntime.InvokeVoidAsync("openVncClientWindow", connectionId, Host, Port, width, height, NavigationManager.BaseUri);
            // 构建查询参数
            var queryParams = new Dictionary<string, object?>
            {
                ["connectionId"] = connectionId,
                ["host"]         = Host,
                ["port"]         = Port,
                ["width"]        = width,
                ["height"]       = height
            };
            var queryString = string.Join("&", queryParams.Where(kv => kv.Value is not null).Select(kv => $"{Uri.EscapeDataString(kv.Key)}={Uri.EscapeDataString(kv.Value?.ToString() ?? "")}"));
            var url         = $"/vnc-client?{queryString}";

            // 计算窗口尺寸和位置
            var windowWidth  = width;
            var windowHeight = height;
            var screenWidth  = 1280;
            var screenHeight = 720;
        #if WINDOWS
            try
            {
                screenWidth = System.Windows.Forms.Screen.PrimaryScreen?.Bounds.Width ?? 1280;
                screenHeight = System.Windows.Forms.Screen.PrimaryScreen?.Bounds.Height ?? 720;
            }
            catch { }
        #endif
            windowWidth  = Math.Min(windowWidth,  screenWidth  - 100);
            windowHeight = Math.Min(windowHeight, screenHeight - 100);
            var left = (screenWidth  - windowWidth)  / 2;
            var top  = (screenHeight - windowHeight) / 2;

            // 打开新窗口（不通过JSRuntime，直接用window.open）
            var features = $"width={windowWidth},height={windowHeight},top={top},left={left},resizable=yes,scrollbars=yes,status=no,toolbar=no,menubar=no,location=no";
            var _        = JsRuntime.InvokeVoidAsync("eval", $"window.open('{url}', 'VNC_{connectionId}', '{features}')");

            // 更新活跃连接列表
            UpdateActiveConnections();
            // 更新活跃连接列表
            UpdateActiveConnections();
        }
        catch (Exception ex) { await JsRuntime.InvokeVoidAsync("alert", $"连接失败: {ex.Message}"); }
    }

    private async Task ReconnectConnection(string connectionId)
    {
        var connection = ActiveConnections.FirstOrDefault(c => c.ConnectionId == connectionId);
        if (connection != null)
        {
            // 使用相同的参数重新连接
            Host           = connection.Host;
            Port           = connection.Port;
            ConnectionName = connection.ConnectionName;
            await ConnectToVncServer(connectionId);
        }
    }

    private async Task RemoveConnection(string connectionId)
    {
        try
        {
            await VncService.RemoveConnection(connectionId);
            UpdateActiveConnections();
        }
        catch (Exception ex) { await JsRuntime.InvokeVoidAsync("alert", $"断开连接失败: {ex.Message}"); }
    }


}